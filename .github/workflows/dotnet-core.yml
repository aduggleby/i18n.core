name: i18n.core

on: push

env:
  GITVERSION_VERSION: 5.3.4
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1 

jobs:

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    steps:
      
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Fetch all history for all tags and branches (gitversion requirement)
        run: git fetch --prune --unshallow
                      
      - name: Read dotnet sdk version from global.json
        shell: pwsh
        run: |
          $DOTNET_VERSION = Get-Content ".\$GITHUB_WORKSPACE\global.json" | ConvertFrom-Json | Select-Object -Expand sdk | Select-Object -Expand version    
          echo "::set-env name=DOTNET_VERSION::$DOTNET_VERSION"
          
      - name: Setup dotnet v${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v1.4.0
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - id: set-version
        name: Setup GitVersion v${{ env.GITVERSION_VERSION }} 
        shell: pwsh
        run: |
          dotnet tool update GitVersion.Tool --global --version ${{ env.GITVERSION_VERSION }}
          $BUILD_VERSION = (dotnet gitversion /showVariable NugetVersionv2) | out-string
          echo "::set-env name=BUILD_VERSION::$BUILD_VERSION"
                
      - name: Build
        shell: pwsh
        run: |
          pwsh -c ".\${{ env.GITHUB_WORKSPACE }}\build.ps1" -Version ${{ env.BUILD_VERSION }} -Nupkg
          echo "${{ env.BUILD_VERSION }}" | Out-File ".\${{ env.GITHUB_WORKSPACE }}\nupkgs\nupkg_version.txt"

      - name: Install pot tool
        run: dotnet tool update pot --global --version ${{ env.BUILD_VERSION }} --add-source .\nupkgs

      - name: Build locale
        shell: pwsh
        run: |          
          $pot_filename = ".\src\i18n.Demo\locale\messages.pot"
          $web_config_filename = ".\src\i18n.Demo\Web.config"

          pot --web-config-path $web_config_filename

          $locale_exists = Test-Path $pot_filename -PathType Leaf
          if($locale_exists -eq $false) {
              exit 1
          }

          $pot_creation_date = Get-Content .\src\i18n.Demo\locale\messages.pot | Select-Object -First 4 | Where-Object { [string]::IsNullOrWhiteSpace($_) -eq $false } | Select-Object -Last 1
          $is_valid_str = ($pot_creation_date -replace "`"", "").StartsWith("POT-Creation-Date");
          if($is_valid_str -eq $false) {
              exit 1
          }
          
      - name: Upload nupkg
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: nupkgs-${{ matrix.os }}
          path: ${{ github.workspace }}/nupkgs/**/*
        
  publish:
     if: success()
     runs-on: windows-latest
     name: Publish nuget package
     needs: [build]
     steps:
          
      - name: Download nupkgs
        uses: actions/download-artifact@v2
        with:
          name: nupkgs-windows-latest
          path: ${{ github.workspace }}/nupkgs
          
      - name: Push nuget packages 
        shell: pwsh
        run: | 
          $nupkg_version = Get-Content ".\${{ env.GITHUB_WORKSPACE }}\nupkgs\nupkg_version.txt"
                  
          dotnet nuget push ".\${{ env.GITHUB_WORKSPACE }}\nupkgs"--source nuget.org --api-key ${{ secrets.PETERSUNDE_NUGET_ORG_API_KEY }}
          echo "::set-env name=NUPKG_VERSION::$nupkg_version"

      - name: Create github release tag
        if: success() && github.ref == 'refs/heads/master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NUPKG_VERSION }}
          release_name: Release v${{ env.NUPKG_VERSION }}
          draft: true
          prerelease: false
